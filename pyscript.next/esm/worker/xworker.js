/* c8 ignore next */
export default () =>
    new Worker(
        URL.createObjectURL(
            new Blob(
                [
                    'const e=e=>e.arrayBuffer(),t=e=>e.json(),r=e=>e.text(),{isArray:n}=Array,{all:o,resolve:s}=new Proxy(Promise,{get:(e,t)=>e[t].bind(e)}),a=(e,t=location.href)=>new URL(e,t).href,i=new WeakMap,c=e=>{const t=e||console,r={stderr:(t.stderr||console.error).bind(t),stdout:(t.stdout||console.log).bind(t)};return{stderr:(...e)=>r.stderr(...e),stdout:(...e)=>(console.log(r.stdout),r.stdout(...e)),async get(e){const t=await e;return i.set(t,r),t}}},u=(e,t,r)=>{const{parentPath:n,name:o}=e.analyzePath(t,!0);return e.mkdirTree(n),e.writeFile([n,o].join("/"),new Uint8Array(r),{canOwn:!0})},l=e=>{const t=e.split("/");return t.pop(),t.join("/")},d=(e,t)=>{const r=[];for(const n of t.split("/"))r.push(n),n&&e.mkdir(r.join("/"))},p=(e,t)=>{const r=[];for(const e of t.split("/"))switch(e){case"":case".":break;case"..":r.pop();break;default:r.push(e)}return[e.cwd()].concat(r).join("/").replace(/^\\/+/,"/")},h=e=>{const t=e.map((e=>e.trim().replace(/(^[/]*|[/]*$)/g,""))).filter((e=>""!==e&&"."!==e)).join("/");return e[0].startsWith("/")?`/${t}`:t},w=new WeakMap,f=(t,r,s)=>o((e=>{for(const{files:t,to_file:r,from:n=""}of e){if(void 0!==t&&void 0!==r)throw new Error("Cannot use \'to_file\' and \'files\' parameters together!");if(void 0===t&&void 0===r&&n.endsWith("/"))throw new Error(`Couldn\'t determine the filename from the path ${n}, please supply \'to_file\' parameter.`)}return e.flatMap((({from:e="",to_folder:t=".",to_file:r,files:o})=>{if(n(o))return o.map((r=>({url:h([e,r]),path:h([t,r])})));const s=r||e.slice(1+e.lastIndexOf("/"));return[{url:e,path:h([t,s])}]}))})(s).map((({url:n,path:o})=>((e,t)=>fetch(a(t,w.get(e))))(s,n).then(e).then((e=>t.writeFile(r,o,e)))))),y=e=>function(t,r,n){return globalThis.xworker=n,this[e](t,`from js import xworker;${r}`)};var m={type:["micropython","mpy"],module:()=>"http://localhost:8080/micropython/micropython.mjs",async engine({loadMicroPython:e},t,r){const{stderr:n,stdout:o,get:s}=c();r=r.replace(/\\.m?js$/,".wasm");const a=await s(e({stderr:n,stdout:o,url:r}));return t.fetch&&await f(this,a,t.fetch),a},run:(e,t)=>e.runPython(t),runAsync:(e,t)=>e.runPythonAsync(t),runEvent(e,t,r){return this.run(e,`import js;event=js.__events.get(${r});${t}`)},runWorker:y("run"),runWorkerAsync:y("runAsync"),writeFile:({FS:e},t,r)=>u(e,t,r)};const g=e=>function(t,r,n){return globalThis.xworker=n,this[e](t,`from js import xworker;${r}`)};var v={type:["pyodide","py"],module:(e="0.22.1")=>`https://cdn.jsdelivr.net/pyodide/v${e}/full/pyodide.mjs`,async engine({loadPyodide:e},t){const{stderr:r,stdout:n,get:o}=c(),s=await o(e({stderr:r,stdout:n}));if(t.fetch&&await f(this,s,t.fetch),t.packages){await s.loadPackage("micropip");const e=await s.pyimport("micropip");await e.install(t.packages),e.destroy()}return s},run:(e,t)=>e.runPython(t),runAsync:(e,t)=>e.runPythonAsync(t),runEvent(e,t,r){return this.run(e,`import js;event=js.__events.get(${r});${t}`)},runWorker:g("run"),runWorkerAsync:g("runAsync"),writeFile:({FS:e},t,r)=>u(e,t,r)};const k="ruby",b=e=>function(t,r,n){return globalThis.xworker=n,this[e](t,`require "js";xworker=JS::eval("return xworker");${r}`)};var j={experimental:!0,type:[k,"rb"],module:(e="2.0.0")=>`https://cdn.jsdelivr.net/npm/ruby-3_2-wasm-wasi@${e}/dist/browser.esm.js`,async engine({DefaultRubyVM:e},t,r){const n=await fetch(`${r.slice(0,r.lastIndexOf("/"))}/ruby.wasm`),o=await WebAssembly.compile(await n.arrayBuffer()),{vm:s}=await e(o);return t.fetch&&await f(this,s,t.fetch),s},run:(e,t)=>e.eval(t),runAsync:(e,t)=>e.evalAsync(t),runEvent(e,t,r){return this.run(e,`require "js";event=JS::eval("return __events.get(${r})");${t}`)},runWorker:b("run"),runWorkerAsync:b("runAsync"),writeFile:()=>{throw new Error(`writeFile is not supported in ${k}`)}};const $=e=>function(t,r,n){return t.global.set("xworker",n),this[e](t,r)};var A={type:["wasmoon","lua"],module:(e="1.15.0")=>`https://cdn.jsdelivr.net/npm/wasmoon@${e}/+esm`,async engine({LuaFactory:e,LuaLibraries:t},r){const{stderr:n,stdout:o,get:s}=c(),a=await s((new e).createEngine());return a.global.getTable(t.Base,(e=>{a.global.setField(e,"print",o),a.global.setField(e,"printErr",n)})),r.fetch&&await f(this,a,r.fetch),a},run:(e,t)=>e.doStringSync(t),runAsync:(e,t)=>e.doString(t),runEvent(e,t,r){return e.global.set("event",globalThis.__events.get(r)),this.run(e,t)},runWorker:$("run"),runWorkerAsync:$("runAsync"),writeFile:({cmodule:{module:{FS:e}}},t,r)=>((e,t,r)=>(t=p(e,t),d(e,l(t)),e.writeFile(t,new Uint8Array(r),{canOwn:!0})))(e,t,r)};const x=new Map,W=new Map,F=new Proxy(new Map,{get(e,t){if(!e.has(t)){const[r,...n]=t.split("@"),o=x.get(r),s=/^https?:\\/\\//i.test(n)?n[0]:o.module(...n);e.set(t,{url:s,module:import(s),engine:o.engine.bind(o)})}const{url:r,module:n,engine:o}=e.get(t);return(e,s)=>n.then((n=>{W.set(t,e);const a=e?.fetch;return a&&w.set(a,s),o(n,e,r)}))}}),_=e=>{for(const t of[].concat(e.type))x.set(t,e)};for(const e of[m,v,j,A])_(e);const P=async e=>(await import("https://unpkg.com/basic-toml@0.3.1/es.js")).parse(e);let E,M,S;const T=(e,t)=>{addEventListener(e,t||(async t=>{const r=await E;S=t,M(r,`xworker.on${e}(xworker.event);`,L)}),!!t&&{once:!0})},L={onerror(){},onmessage(){},onmessageerror(){},postMessage:postMessage.bind(self),get event(){const e=S;if(!e)throw new Error("Unauthorized event access");return S=void 0,e}};T("message",(({data:{options:e,code:n}})=>{E=(async()=>{const{type:o,version:i,config:c,async:u}=e,l=await((e,n)=>{let o={};if(n)if(n.endsWith(".json"))o=fetch(n).then(t);else if(n.endsWith(".toml"))o=fetch(n).then(r).then(P);else{try{o=JSON.parse(n)}catch(e){o=P(n)}n=a("./config.txt")}return s(o).then((t=>F[e](t,n)))})(((e,t="")=>`${e}@${t}`.replace(/@$/,""))(o,i),c),d=x.get(o);return(M=d["runWorker"+(u?"Async":"")].bind(d))(l,n,globalThis.xworker=L),l})(),T("error"),T("message"),T("messageerror")}));\n',
                ],
                { type: "application/javascript" },
            ),
        ),
        { type: "module" },
    );
